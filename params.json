{
  "name": "Restful",
  "tagline": "Restful workshop material",
  "body": "# Restful\r\n\r\nBefore you start make sure you have installed an Netbeans and an Restful client.\r\n\r\n### Step 1\r\nImport the project from github in your IDEA. Run the project and open your Restful client. Try to call http://localhost:8080.\r\nDid you find the file? Great, now check the other files in the project out.\r\n\r\nA short explanation of the project files:\r\n\"IssueTrackerCompleteApplication\" initialize the springframwork.\r\n\"Issue\" is the model class.\r\n\"IssueController\" defines the endpoints.\r\n\"IssueRespository\" is the temporarily database that holds the data when its running.\r\n\r\n### Step 2\r\nLet's start with the first endpoint in the IssueController.\r\nCreate a mehtod that a string returns. For example:\r\n```\r\npublic String firstEndpoint() {\r\n    return \"You wrote your first endpoint.\";\r\n}\r\n```\r\nTo make the endpoint callable, add the annotation.\r\n```\r\n@RequestMapping(value=\"/firstendpoint\", method=RequestMethod.GET)\r\n```\r\nThe spring framework map the method with the annotation *@RequestMapping* to a url path. To seperate each method a url is defined, the variable *value* define the second part of the url after http://localhost:8080. \r\nIn this example:\r\n```\r\nhttp://localhost:8080/firstendpoint\r\n```\r\nTry to call the endpoint with your restful client.\r\n**Important if the api is running stop it before you run it again.**\r\n### Step 3\r\nLets start with a small project *Issue Tracker*. Your task is it to implement the api for the GUI.\r\n\r\nAlready implemented are\r\n- Model\r\n- Database\r\n\r\nToDo:\r\nA endpoint to retieve an issue  \r\n```\r\nGET /issues/{id} \r\n```\r\nA endpoint to create an issue   \r\n```\r\nPOST /issues\r\n```\r\nA endpoint to delete an issue                 \r\n```\r\nDELETE /issues/{id} \r\n```\r\nA endpoint to update an issue                 \r\n```\r\nPUT /issues/{id} \r\n```\r\nA endpoint to retrieve a list of all issues   \r\n```\r\nGET /issues \r\n```\r\n### Step 4\r\nStart with the endpoint that retrieve an certain issue. Create a methode like in step 2. Change the url path to:\r\n```\r\n/issues/{id}\r\n```\r\nTo get a ceratin issue we send a http request with the id in the url to the endpoint. To read the id out of the url we add a parameter in the method.\r\n```\r\n@PathVariable long id\r\n```\r\nThe return value and response has to be upadeted to:\r\n```\r\nResponseEntity<Void>\r\nreturn new ResponseEntity(issue, HttpStatus.OK)\r\n```\r\nThe last step is to find the object with the id in the database.\r\n```\r\nIssue current = issueRepository.findOne(id);\r\n```\r\nBefore we can test it, we need to add an issue.\r\n\r\n### Step 5\r\nFor that create a new endpoint \"addIssue\":\r\n```\r\nPOST /issues\r\n```\r\nCreate a method like descripted in the steps before. To define from which Content-Type the http request is, add in the annotation:\r\n```\r\nconsumes=MediaType.APPLICATION_JSON_VALUE\r\n```\r\nThis define the how the body of the http request should be written. For our endpoint. To read the values from the http request add the following to the parameter in the method:\r\n```\r\n@RequestBody Issue issue\r\n```\r\nAdd the Issue object to the database and check out which *HttpStatus* response would be great for this endpoint:\r\n```\r\nissueRepository.save(new Issue(issue.title, issue.category));\r\n```\r\nNow we can test it. Goto to you restful client call the endpoint and dont forget the body must be json. \r\n*Hint don't forget to change the Content-Type.*\r\n```\r\nContent-Type: application/json\r\n```\r\nJSON Body:\r\n```\r\n{\r\n    \"title\": \"Tire\",\r\n    \"category\": \"Car\"\r\n}\r\n```\r\n```\r\nPOST on http://localhost:8080/issues\r\n```\r\nAfter adding some issues try to call a certain issue with a id.\r\n```\r\nGET on http://localhost:8080/issues/1\r\n```\r\n\r\n### Step 6\r\nGreat work so far. Try to create the last three endpoints on your own with these informations.\r\n\r\nA endpoint to retrieve a list of all issues   \r\n```\r\nGET /issues \r\nissueRepository.findAll()\r\n```\r\n\r\nA endpoint to delete an issue                 \r\n```\r\nDELETE /issues/{id} \r\nissueRepository.delete(issueId)\r\n```\r\n\r\nA endpoint to update an issue             \r\n```\r\nPUT /issues/{id} \r\nissueRepository.save(issue);\r\n```\r\n\r\n### Step 7\r\nThe last step is about exceptions with restful. Maybe you already noticed that the enum HttpStatus holds a lot of status codes. For example: \r\n```\r\n404 NOT_FOUND\r\n411 LENGTH_REQUIRED\r\n200 OK\r\n201 CREATED\r\n204 NO_CONTENT\r\n```\r\nUnitl now we only implemented success calls, let's add fail responses to our endpoints. Here is one example to do a not found error. \r\n```\r\nif(issue == null) {\r\n    return new ResponseEntity(\"Issue with the id: \"+id+\" not found.\", HttpStatus.NOT_FOUND);\r\n}\r\n```\r\nTry on your own to implement the LENGTH_REQUIRED for the value title>3.\r\nGood luck :).\r\n\r\n\r\nWe hope you had some fun to implement a restful api.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}